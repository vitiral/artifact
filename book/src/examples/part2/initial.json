{"project":{"paths":{"base":"/home/garrett/tmp/learn-art","code_paths":["/home/garrett/tmp/learn-art/flash"],"exclude_code_paths":[],"artifact_paths":["/home/garrett/tmp/learn-art/design"],"exclude_artifact_paths":[]},"code_impls":{"SPC-format":{"primary":{"file":"/home/garrett/tmp/learn-art/flash/load.py","line":45},"secondary":{".question":{"file":"/home/garrett/tmp/learn-art/flash/load.py","line":3},".tst-basic":{"file":"/home/garrett/tmp/learn-art/flash/tests/test_load.py","line":3},".tst-duplicates":{"file":"/home/garrett/tmp/learn-art/flash/tests/test_load.py","line":39},".tst-invalid_cols":{"file":"/home/garrett/tmp/learn-art/flash/tests/test_load.py","line":29},".tst-load":{"file":"/home/garrett/tmp/learn-art/flash/tests/test_load.py","line":17},".validate":{"file":"/home/garrett/tmp/learn-art/flash/load.py","line":17}}},"TST-load":{"primary":{"file":"/home/garrett/tmp/learn-art/flash/tests/test_load.py","line":1},"secondary":{}}},"artifacts":{"REQ-purpose":{"id":"DoWdPsuX4839k2qxuZTMvA","name":"REQ-purpose","file":"/home/garrett/tmp/learn-art/design/purpose.md","partof":[],"parts":["SPC-cli","SPC-format","SPC-report"],"completed":{"spc":0.333,"tst":0.333},"text":"Write a flash card quizzer from scratch and learn about\nquality best practices while doing so.\n\nThe example tutorial can be found here:\n    http://wiki.openhatch.org/Flash_card_challenge\n\nIt should be easy for users to input questions to the\nquizzer in a simple and open format. Additionally, the\nquizzer should use effective memorization techniques.\nSome possible ideas include:\n- asking items in a random order\n- telling the correct answer after the user answers incorrectly\n- asking items more often if they were answered incorrectly\n- allowing users to configure time limits, so they can\n  compare results between quizzes.\n","impl_":{"type":"NotImpl"},"subnames":[]},"SPC-cli":{"id":"dbuUzJ9Wq49iD2zxFn9NpA","name":"SPC-cli","file":"/home/garrett/tmp/learn-art/design/purpose.md","partof":["REQ-purpose"],"parts":[],"completed":{"spc":0.0,"tst":0.0},"text":"\nThe minimum viable product shall be a command line utility\nthat is given the path to one or more question files as\narguments\n\nAdditional arguments will include:\n- `-t`: specify the time allowed for each question\n- `-T`: specify the total time allowed for the whole quiz\n- `-r NUM`: repeat questions only a certain number of times.\n    By default there is no limit\n\nThe program will ask one question at a time, recording how\nmany answers the user got correct/incorrect and weighting\nfuture questions accordingly.\n\nWhen the program is complete it will report:\n- time taken, broken up by whole quiz and each question\n- the user's score\n","impl_":{"type":"NotImpl"},"subnames":[]},"SPC-format":{"id":"DzigOclMqN33UrsCSr_qpA","name":"SPC-format","file":"/home/garrett/tmp/learn-art/design/purpose.md","partof":["REQ-purpose"],"parts":[],"completed":{"spc":1.0,"tst":1.0},"text":"The user shall be able to easily configure the quiz\nquestions through a simple csv format consisting of two\ncolumns: the question and the answer.\nThe format of the csv file **shall** be a csv file of the form:\n    City, Capitol\n    > Note: whitespace will be ignored\n\n## [[.question]]\nThe `Question` class shall be the primary datatype used for questions in the\napplication. Quetions shall:\n- Store the question and answer.\n- Provide a method `ask` to ask the user the question\n  and validate the answer.\n\n## [[.validate]]\nInput questions **shall** be validated to:\n- Guarantee against duplicates.\n- Guarantee that the data format is correct.\n\n## Unit Tests:\n- Invalid: make sure invalid inputs don't work\n  - [[.tst-invalid_cols]]: Test invalid number of columns (0, 1, and 3).\n  - [[.tst-duplicates]]: Test duplicate names.\n- Make sure loading works.\n  - [[.tst-basic]]: Loading a raw string and validating it.\n  - [[.tst-load]]: Loading a valid csv file path and validating i\n","impl_":{"type":"Code","value":{"primary":{"file":"/home/garrett/tmp/learn-art/flash/load.py","line":45},"secondary":{".question":{"file":"/home/garrett/tmp/learn-art/flash/load.py","line":3},".tst-basic":{"file":"/home/garrett/tmp/learn-art/flash/tests/test_load.py","line":3},".tst-duplicates":{"file":"/home/garrett/tmp/learn-art/flash/tests/test_load.py","line":39},".tst-invalid_cols":{"file":"/home/garrett/tmp/learn-art/flash/tests/test_load.py","line":29},".tst-load":{"file":"/home/garrett/tmp/learn-art/flash/tests/test_load.py","line":17},".validate":{"file":"/home/garrett/tmp/learn-art/flash/load.py","line":17}}}},"subnames":[".question",".tst-basic",".tst-duplicates",".tst-invalid_cols",".tst-load",".validate"]},"SPC-report":{"id":"dhK_a1g7CMdYnKbRzVCwaw","name":"SPC-report","file":"/home/garrett/tmp/learn-art/design/purpose.md","partof":["REQ-purpose"],"parts":[],"completed":{"spc":0.0,"tst":0.0},"text":"When the program is complete a report shall be printed with:\n- time taken, broken up by whole quiz and each question\n- the user's total score\n- questions ranked by ones the user had the most difficulty\n","impl_":{"type":"NotImpl"},"subnames":[]}}},"web_type":"Static"}