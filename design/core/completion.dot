// I realized in the middle of graphing this that I had been
// approaching it wrong.
//
// I had been setting TST.tested == TST.completed
// The logic was much more clean when I just said
// that TST only affects the TST of items and did
// the opposite.

digraph G {
    // REQ-completion
    {
        {R_start [label="\
REQ artifact completion.";
        shape=box]}

        {R_children_both [label="\
+average of tested% & completed%
of children"]}
        {R_children_tst [label="\
+average of tested% of children"]}

        {R_nt [label="type?"]}

        R_start -> R_nt;

        R_nt -> {R_req [label="REQ"]}
        R_nt -> {R_spc [label="SPC"]};
        R_nt -> {R_tst [label="TST"]};

        {R_spc_code_exists [label="code/done exists?"; shape=diamond]}
        {R_tst_code_exists [label="code/done exists?"; shape=diamond]}
        {R_spc_code [label="+completed%: Code links/done"]}
        {R_tst_code [label="+tested%: Code links/done"]}

        R_req -> R_children_both;
        R_spc -> R_spc_code_exists;
            R_spc_code_exists -> R_spc_code [label="yes"];
                R_spc_code -> R_children_both;
            R_spc_code_exists -> R_children_both [label="no"];
        R_tst -> R_tst_code_exists;
            R_tst_code_exists -> R_tst_code [label="yes"];
                R_tst_code -> R_children_tst;
            R_tst_code_exists -> R_children_tst [label="no"];
    }

    // TODO: I want this cluster to be horizontal
    {
        // whole operation
        {G_start [label="\
Calculate completed% and tested%
for a node who's children are known";
        shape=box]}

        G_start -> T_start;
    }

    {
        {T_start [label="type?"]}
        {T_req [label="All % are the average of children + done"; shape=box]}
        {T_other [label="We must calculate it"]}

        T_start -> T_req [label="REQ"];
        T_start -> T_other [label="SPC|TST"];

        T_other -> L_start -> C_start -> F_start;
    }


    // whether to use a link or not
    {
        // starting values
        {L_start [label="\
Calculate effects of code-links / done. All links act as one \"part\""
        shape=box]}

        // ending values
        {L_both [label="both %"; shape=box]}
        {L_completed [label="completed %"; shape=box]}
        {L_tested [label="tested %"; shape=box]}
        {L_nouse [label="no effect"; URL="[[@.link_nouse]]"; shape=box]}

        // other
        {L_links [label="has links / done"]}
        {L_nolinks [label="no links / done"]}

        L_start -> L_links;
        L_start -> L_nolinks;

        // node type is other, find calulation
        // has links
        L_links -> L_nt [label="calc %"];

        // no links
        L_nolinks -> {L_nl_a [label="parts"]} -> L_nouse;
        L_nolinks -> {L_nl_b [label="no parts"]} [label="0%"];
            L_nl_b -> L_nt

        {L_nt [label="type?"; shape=diamond]}

        L_nt -> {L_req [label="REQ"]}
        L_nt -> {L_spc [label="SPC"]}
        L_nt -> {L_tst [label="TST"]}
        L_nt -> {L_done [label="'done='"; URL="[[@.link_done]]"]};

        L_req -> L_both
        L_done -> L_both
        L_spc -> L_completed
        L_tst -> L_tested;
    }

    // what to use a child for
    {
        // starting values
        {C_start [label="\
Each child is an additional \"part\". What % does it impact?";
        shape=box]}

        // ending values
        {C_completed [label="completed %"; shape=box]}
        {C_tested [label="tested %"; shape=box]}
        {C_both [label="both %"; shape=box]}

        // different depending on the type of child
        {C_req [label="REQ"]}
        {C_spc [label="SPC"]}
        {C_tst [label="TST"]}

        {C_nt [label="child type?"; shape=triangle]}
        C_start -> C_nt;
            C_nt -> C_req;
            C_nt -> C_spc;
            C_nt -> C_tst;


        C_req -> C_both;
        C_spc -> C_both;
        C_tst -> C_tested;

    }

    // final setting / cleanup
    {
        // starting values
        {F_start [label="Final cleanup"; shape=box]}

        // ending values
        {F_equate [label="set completed% = tested%"; shape=box]}
        {F_nochange [label="no cleanup"]}

        {F_nt [label="type?"; shape=diamond]}

        F_start -> F_nt
        F_nt -> F_equate [label="TST"];
        F_nt -> F_nochange [label="REQ | SPC"];
    }


}
