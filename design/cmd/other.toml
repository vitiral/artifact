[SPC-cmd-export]
text = '''
`art export` shall be able to export artifacts to various static file
formats. This will allow a user to display their artifacts in a pretty
format on services like github.

Syntax: `art export [-d|--output-directory PATH] TYPE`

Supported types **shall** be:
- html: this is the MUST HAVE export type
- markdown: this is a possible future type

`art export` **shall** provide a flag `-d|--output-directory` that allows
the user to specify a different output directory for the exported files.
This flag is followed by a (possibly non-existent) path `PATH`.
When the `-d|--output-directory` flag is ommitted, the path `PATH` defaults
to the current working directory `cwd`.
'''

[SPC-cmd-fmt]
text = '''
`art fmt` will be the command that is run to format all files in a project
to their correct value. This tool **will** be modeled after gofmt's args:

```
-d  Do not print reformatted sources to standard output.    
    If a file's formatting is different than artfmt's, print diffs 
    to standard output.

-l  Do not print reformatted sources to standard output.
    If a file's formatting is different from artfmt's, print its name   
    to standard output.

-w  Do not print reformatted sources to standard output.    
    If a file's formatting is different from artfmt's, overwrite it with 
    artfmt's version.

```

The diffing functionality will be supported by the crate `difference`
'''

[SPC-cmd-init]
text = '''
`art init` is the primary first command that will be run by the user when they
want to create a artifact project. It will initialize a `.art` folder in the cwd
(giving an error if the cwd is already initialized) and will give the user basic
instructions on how to create requirements and where to get more information.
'''

[SPC-cmd-tutorial]
text = '''
There **shall** be a tutorial that helps the user learn about artifact.

The tutorial should be interactive and guide the user first through the basics of artifact
and then through recording the requirements and design specifications of a simple
project.

Key points that should be hit during the tutorial are:
- how to use `artifact` and the `ls` cmd
- basics of setting the paths to load docs
- creating requirements
- creating specifications
- creating tests
- auto-linking of req <- spc <- of similar names
- manual linking of different names
- format for linking multiple items
- debugging when links are invalid
- marking items as done
- marking items as tested
- overview of error messages and error formats
- final words
'''

[TST-cmd-fmt]
partof = "RSK-security"
text = '''
There shall be extensive testing around the fmt cmd to cover multiple
points of risk:

- the command itself shall "check before writing"
- tests shall apply the changes and then check that data was not lost. 
    If data was lost, it will tell the user
- the command will be frequently used on the requirements for artifact,
    which should help detect failures of the tool
'''

[TST-cmd-init]
text = '''
There shall be a unit test to test basic commands:
- init: just validate that it fails when already initialized and correctly 
    initializes otherwise
'''

[TST-cmd-tutorial]
text = '''
- validate that all lines in the tutorial are 80 characters or less.
- validate you can do a run-through
'''
